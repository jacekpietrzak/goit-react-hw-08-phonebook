{"version":3,"file":"static/js/725.da4ff796.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/Contact/ContactListItem.module.css?b3f3","components/Contact/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/App.module.css?6c4d","pages/PhonebookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"section\":\"ContactForm_section__Yogoh\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addContact,\n  selectContacts,\n} from '../../redux/phonebook/contactsSlice';\n\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const inputNameRef = useRef(null);\n  const inputNumberRef = useRef(null);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    handleAddContact();\n  };\n\n  const handleAddContact = () => {\n    const contactName = inputNameRef.current.value;\n    const contactNumber = inputNumberRef.current.value;\n\n    const newContact = {\n      name: contactName,\n      number: contactNumber,\n    };\n\n    const checkName = contacts.find(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (checkName !== undefined) {\n      return alert(`${checkName.name} is already in contacts.`);\n    }\n\n    dispatch(addContact(newContact));\n    inputNameRef.current.value = '';\n    inputNumberRef.current.value = '';\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <section className={css.section}>\n        <label className={css.label} htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          className={css.input}\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          ref={inputNameRef}\n        />\n      </section>\n      <section className={css.section}>\n        <label className={css.label} htmlFor=\"tel\">\n          Number\n        </label>\n        <input\n          className={css.input}\n          id=\"tel\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          ref={inputNumberRef}\n        />\n      </section>\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { useRef } from 'react';\nimport { setStatusFilter } from '../../redux/phonebook/filterSlice';\n\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterInputRef = useRef(null);\n\n  const handleFilter = () => {\n    const filter = filterInputRef.current.value.toLowerCase();\n    dispatch(setStatusFilter(filter));\n  };\n\n  return (\n    <div className={css.filter}>\n      <label className={css.label} htmlFor=\"filter\">\n        Find contacts by name\n      </label>\n      <input\n        className={css.input}\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilter}\n        ref={filterInputRef}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactListItem_contact__9Jn78\",\"button\":\"ContactListItem_button__loa1i\"};","import { useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/phonebook/contactsSlice';\n\nimport css from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <li className={css.contact}>\n      {contact.name}: {contact.number}\n      <button\n        className={css.button}\n        type=\"button\"\n        id={contact.id}\n        onClick={() => handleRemoveContact(contact.id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Contact;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/phonebook/contactsSlice';\nimport { selectFilter } from 'redux/phonebook/filterSlice';\n\nimport css from './ContactList.module.css';\nimport Contact from '../Contact/ContactListItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filterStatus = filter.status;\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterStatus)\n  );\n\n  return (\n    <div>\n      <ul className={css.list}>\n        {filteredContacts.map(contact => {\n          return <Contact contact={contact} key={contact.id} />;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"App\":\"App_App__HxVoM\",\"h1\":\"App_h1__-PUlb\",\"h2\":\"App_h2__bWieB\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  fetchContacts,\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../redux/phonebook/contactsSlice';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport ContactList from '../components/ContactList/ContactList';\nimport css from '../components/App.module.css';\n\nexport default function PhonebookPage() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1 className={css.h1}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={css.h2}>Contacts</h2>\n      <Filter />\n      {isLoading && <div>Loading...</div>}\n      {error && <div>{error}</div>}\n      {contacts.length === 0 && !isLoading && <div>No contacts to show</div>}\n      {contacts.length > 0 && <ContactList />}\n    </>\n  );\n}\n"],"names":["contacts","useSelector","selectContacts","inputNameRef","useRef","inputNumberRef","dispatch","useDispatch","handleAddContact","newContact","name","current","value","number","checkName","find","contact","toLowerCase","undefined","alert","addContact","className","css","onSubmit","event","preventDefault","htmlFor","type","id","pattern","title","required","ref","filterInputRef","onChange","filter","setStatusFilter","onClick","removeContact","filterStatus","selectFilter","status","filteredContacts","includes","map","PhonebookPage","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","length"],"sourceRoot":""}